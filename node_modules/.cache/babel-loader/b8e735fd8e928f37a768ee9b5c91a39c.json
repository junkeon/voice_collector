{"ast":null,"code":"var _jsxFileName = \"/home/jkpark/Documents/react/voice-collector/src/components/RecordDiv.js\",\n    _s = $RefreshSig$();\n\nimport { React, useRef, useEffect, useState } from \"react\";\nimport { Grid, IconButton, Typography } from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Record({\n  classes,\n  sentList,\n  setSentList,\n  index,\n  setIndex\n}) {\n  _s();\n\n  const media = useReactMediaRecorder({\n    audio: true,\n    onStop: (a, b) => {\n      setblob(b);\n    }\n  });\n  const [text, setText] = useState('');\n  const [recBtn, setRecBtn] = useState(true);\n  const waveformRef = useRef();\n  const [blob, setblob] = useState('');\n  const [decBtnState, setDecState] = useState({\n    'color': 'disabled',\n    'disabled': true\n  });\n  const [iconColor, setIconColor] = useState('action');\n  const [incBtnState, setIncState] = useState({\n    'color': 'inherit',\n    'disabled': false\n  });\n  const [statusMSG, setStatusMSG] = useState(\"Ready to record\");\n  const [statusVis, setStatusVis] = useState('block');\n  const [waveVis, setWavVis] = useState('none');\n  const totalNumber = sentList.length;\n  useEffect(() => {\n    if (waveformRef.current && blob !== '') {\n      blobToBase64(blob);\n      const wavesurfer = WaveSurfer.create({\n        container: waveformRef.current,\n        waveColor: 'blue',\n        barWidth: 2,\n        barMinHeight: 1,\n        cursorColor: 'transparent',\n        progressColor: 'blue' // scrollParent:true\n\n      });\n      wavesurfer.loadBlob(blob);\n      return () => {\n        wavesurfer.destroy();\n      };\n    }\n  }, [blob]);\n  useEffect(() => {\n    if (text !== '') {\n      var check = window.confirm('음성 인식 결과 : \\n' + text);\n\n      if (check) {\n        setSentList(sentList.map(item => item.id === index ? { ...item,\n          done: true\n        } : item));\n        changeSent('+');\n      }\n    }\n\n    setStatusMSG(\"Ready to record\");\n    setStatusVis('block');\n    setWavVis('none');\n  }, [text, blob]);\n  useEffect(() => {\n    if (index === 0) {\n      setDecState({\n        'color': 'disabled',\n        'state': true\n      });\n    } else {\n      setDecState({\n        'color': 'inherit',\n        'state': false\n      });\n    }\n\n    if (index === sentList.length - 1) {\n      setIncState({\n        'color': 'disabled',\n        'state': true\n      });\n    } else {\n      setIncState({\n        'color': 'inherit',\n        'state': false\n      });\n    }\n  }, [index]);\n\n  function blobToBase64(blob) {\n    console.log('Connect to server...');\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      var dataUrl = reader.result;\n      var base64 = dataUrl.split(',')[1];\n      sendToOffline(base64);\n    };\n\n    reader.readAsDataURL(blob);\n    getScript(blob, index, 'jkp', sentList[index].text, text);\n  }\n\n  ;\n\n  function sendToOffline(b64data) {\n    const recipeUrl = \"https://ai-demo.tmaxos.com/xwpqe/restasr/\";\n    const postBody = {\n      'uuid': 'restasr',\n      'data': b64data\n    };\n    const requestMetadata = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postBody)\n    };\n    fetch(recipeUrl, requestMetadata).then(res => res.json()).then(res => setText(res.text));\n  }\n\n  function getScript(b64data, index, user, scp, asr) {\n    const recipeUrl = \"http://0.0.0.0:5024/send_audio\";\n    const postBody = {\n      'user': user,\n      'blob': b64data,\n      'index': index,\n      'sent': scp,\n      'asr': asr\n    };\n    const requestMetadata = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postBody)\n    };\n    fetch(recipeUrl, requestMetadata).then(res => res.json());\n  }\n\n  function record() {\n    if (recBtn) {\n      media.startRecording();\n      setIconColor('secondary');\n      setStatusMSG('Recording...');\n      setDecState({\n        'color': 'disabled',\n        'state': true\n      });\n      setIncState({\n        'color': 'disabled',\n        'state': true\n      });\n    } else {\n      media.stopRecording();\n      setIconColor('action');\n      setStatusMSG('Ready to record');\n      setStatusVis('none');\n      setWavVis('block');\n\n      if (index === 0) {\n        setDecState({\n          'color': 'disabled',\n          'state': true\n        });\n      } else {\n        setDecState({\n          'color': 'inherit',\n          'state': false\n        });\n      }\n\n      if (index === sentList.length - 1) {\n        setIncState({\n          'color': 'disabled',\n          'state': true\n        });\n      } else {\n        setIncState({\n          'color': 'inherit',\n          'state': false\n        });\n      }\n    }\n\n    setRecBtn(!recBtn);\n  }\n\n  function changeSent(direc) {\n    if (direc === '+') {\n      if (index < sentList.length - 1) {\n        setIndex(index + 1);\n      }\n    } else if (direc === '-') {\n      if (index > 0) {\n        setIndex(index - 1);\n      }\n    }\n\n    setIconColor('action');\n    setStatusMSG('Ready to record');\n    setStatusVis('block');\n    setWavVis('none');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.content,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.index,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: [sentList[index].done ? 'Done - ' : 'Undone - ', index + 1, \" / \", totalNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.parSentence,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.sentence,\n        children: sentList[index].text.split('\\n').map((line, idx) => {\n          return /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            style: {\n              paddingTop: 7,\n              paddingBottom: 7\n            },\n            children: line\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.visual,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.status,\n        style: {\n          display: statusVis\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: statusMSG\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: waveformRef,\n        className: classes.waveform,\n        style: {\n          display: waveVis\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          className: classes.grid,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => {\n              changeSent('-');\n            },\n            disabled: decBtnState['state'],\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n              fontSize: \"large\",\n              className: classes.controlBtn,\n              color: decBtnState['color']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          className: classes.grid,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: record,\n            children: /*#__PURE__*/_jsxDEV(MicIcon, {\n              fontSize: \"large\",\n              className: classes.controlBtn,\n              color: iconColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          className: classes.grid,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => {\n              changeSent('+');\n            },\n            disabled: incBtnState['state'],\n            children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n              fontSize: \"large\",\n              className: classes.controlBtn,\n              color: incBtnState['color']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Record, \"XQAGc0l11qhMYwinBpmbeA6yGf8=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = Record;\nexport default Record;\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["/home/jkpark/Documents/react/voice-collector/src/components/RecordDiv.js"],"names":["React","useRef","useEffect","useState","Grid","IconButton","Typography","ChevronLeftIcon","ChevronRightIcon","MicIcon","useReactMediaRecorder","WaveSurfer","Record","classes","sentList","setSentList","index","setIndex","media","audio","onStop","a","b","setblob","text","setText","recBtn","setRecBtn","waveformRef","blob","decBtnState","setDecState","iconColor","setIconColor","incBtnState","setIncState","statusMSG","setStatusMSG","statusVis","setStatusVis","waveVis","setWavVis","totalNumber","length","current","blobToBase64","wavesurfer","create","container","waveColor","barWidth","barMinHeight","cursorColor","progressColor","loadBlob","destroy","check","window","confirm","map","item","id","done","changeSent","console","log","reader","FileReader","onload","dataUrl","result","base64","split","sendToOffline","readAsDataURL","getScript","b64data","recipeUrl","postBody","requestMetadata","method","headers","body","JSON","stringify","fetch","then","res","json","user","scp","asr","record","startRecording","stopRecording","direc","content","parSentence","sentence","line","idx","paddingTop","paddingBottom","visual","status","display","waveform","control","grid","controlBtn"],"mappings":"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","sourcesContent":["\nimport { React, useRef, useEffect, useState } from \"react\";\nimport { Grid, IconButton, Typography } from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport MicIcon from '@material-ui/icons/Mic';\n\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport WaveSurfer from \"wavesurfer.js\";\n\nfunction Record({ classes, sentList, setSentList, index, setIndex }) {\n\n    const media = useReactMediaRecorder({ audio: true, onStop: (a, b) => { setblob(b) } })\n    const [text, setText] = useState('')\n    const [recBtn, setRecBtn] = useState(true)\n\n    const waveformRef = useRef();\n    const [blob, setblob] = useState('');\n\n    const [decBtnState, setDecState] = useState({ 'color': 'disabled', 'disabled': true })\n    const [iconColor, setIconColor] = useState('action')\n    const [incBtnState, setIncState] = useState({ 'color': 'inherit', 'disabled': false })\n\n    const [statusMSG, setStatusMSG] = useState(\"Ready to record\")\n    const [statusVis, setStatusVis] = useState('block')\n    const [waveVis, setWavVis] = useState('none')\n\n    const totalNumber = sentList.length\n\n    useEffect(() => {\n        if (waveformRef.current && blob !== '') {\n            blobToBase64(blob);\n            const wavesurfer = WaveSurfer.create({\n                container: waveformRef.current,\n                waveColor: 'blue',\n                barWidth: 2,\n                barMinHeight: 1,\n                cursorColor: 'transparent',\n                progressColor: 'blue',\n                // scrollParent:true\n            });\n\n            wavesurfer.loadBlob(blob);\n\n            return () => {\n                wavesurfer.destroy()\n            }\n        }\n    }, [blob]);\n\n    useEffect(() => {\n        if (text !== '') {\n            var check = window.confirm('음성 인식 결과 : \\n' + text)\n            if (check) {\n                setSentList(sentList.map(item => item.id === index ? { ...item, done: true } : item))\n                changeSent('+')\n                \n            }\n        }\n        setStatusMSG(\"Ready to record\")\n        setStatusVis('block')\n        setWavVis('none')\n    }, [text, blob])\n\n    useEffect(() => {\n        if (index === 0) {\n            setDecState({ 'color': 'disabled', 'state': true })\n        } else {\n            setDecState({ 'color': 'inherit', 'state': false })\n        }\n\n        if (index === sentList.length - 1) {\n            setIncState({ 'color': 'disabled', 'state': true })\n        } else {\n            setIncState({ 'color': 'inherit', 'state': false })\n        }\n    }, [index])\n\n    function blobToBase64(blob) {\n        console.log('Connect to server...')\n        var reader = new FileReader();\n        reader.onload = function () {\n            var dataUrl = reader.result;\n            var base64 = dataUrl.split(',')[1];\n            sendToOffline(base64);\n        };\n        reader.readAsDataURL(blob);\n\n        getScript(blob, index, 'jkp', sentList[index].text, text)\n    };\n\n    function sendToOffline(b64data) {\n        const recipeUrl = \"https://ai-demo.tmaxos.com/xwpqe/restasr/\"\n        const postBody = {\n            'uuid': 'restasr',\n            'data': b64data\n        }\n        const requestMetadata = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(postBody)\n        };\n\n        fetch(recipeUrl, requestMetadata).then(res => res.json()).then(res => setText(res.text))\n    }\n\n    function getScript(b64data, index, user, scp, asr) {\n        const recipeUrl = \"http://0.0.0.0:5024/send_audio\"\n        const postBody = {\n          'user': user,\n          'blob': b64data,\n          'index' : index,\n          'sent' : scp,\n          'asr' : asr\n        }\n        const requestMetadata = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(postBody)\n        };\n    \n        fetch(recipeUrl, requestMetadata)\n        .then(res => res.json())\n      }\n\n    function record() {\n        if (recBtn) {\n            media.startRecording();\n            setIconColor('secondary');\n            setStatusMSG('Recording...')\n            setDecState({ 'color': 'disabled', 'state': true })\n            setIncState({ 'color': 'disabled', 'state': true })\n        } else {\n            media.stopRecording();\n            setIconColor('action');\n            setStatusMSG('Ready to record')\n            setStatusVis('none')\n            setWavVis('block')\n            if (index === 0) {\n                setDecState({ 'color': 'disabled', 'state': true })\n            } else {\n                setDecState({ 'color': 'inherit', 'state': false })\n            }\n\n            if (index === sentList.length - 1) {\n                setIncState({ 'color': 'disabled', 'state': true })\n            } else {\n                setIncState({ 'color': 'inherit', 'state': false })\n            }\n\n\n        }\n        setRecBtn(!recBtn);\n    }\n\n    function changeSent(direc) {\n        if (direc === '+') {\n            if (index < sentList.length - 1) {\n                setIndex(index + 1)\n            }\n        } else if (direc === '-') {\n            if (index > 0) {\n                setIndex(index - 1)\n            }\n        }\n        setIconColor('action');\n        setStatusMSG('Ready to record')\n        setStatusVis('block')\n        setWavVis('none')\n    }\n\n    return (\n        <div className={classes.content}>\n            <div className={classes.index}>\n                <Typography variant=\"h5\">\n                    {sentList[index].done ? 'Done - ' : 'Undone - '}\n                    {index + 1} / {totalNumber}\n                </Typography>\n            </div>\n            <div className={classes.parSentence}>\n                <div className={classes.sentence}>\n                    {sentList[index].text.split('\\n').map((line, idx) => {\n                        return <Typography key={idx} variant=\"h4\" style={{paddingTop:7, paddingBottom : 7}}>{line}</Typography>\n                    })}\n                </div>\n            </div>\n            <div className={classes.visual}>\n                <div className={classes.status} style={{ display: statusVis }}>\n                    <Typography variant=\"h4\">{statusMSG}</Typography>\n                </div>\n                <div ref={waveformRef} className={classes.waveform} style={{ display: waveVis }}></div>\n            </div>\n            <div className={classes.control}>\n                <Grid container spacing={2}>\n                    <Grid item xs className={classes.grid}>\n                        <IconButton\n                            onClick={() => { changeSent('-') }}\n                            disabled={decBtnState['state']}>\n                            <ChevronLeftIcon\n                                fontSize=\"large\"\n                                className={classes.controlBtn}\n                                color={decBtnState['color']} />\n                        </IconButton>\n                    </Grid>\n                    <Grid item xs className={classes.grid}>\n                        <IconButton onClick={record}><MicIcon fontSize=\"large\" className={classes.controlBtn} color={iconColor} /></IconButton>\n                    </Grid>\n                    <Grid item xs className={classes.grid}>\n                        <IconButton\n                            onClick={() => { changeSent('+') }}\n                            disabled={incBtnState['state']}>\n                            <ChevronRightIcon\n                                fontSize=\"large\"\n                                className={classes.controlBtn}\n                                color={incBtnState['color']} />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n            </div>\n        </div >\n    )\n}\n\nexport default Record"]},"metadata":{},"sourceType":"module"}