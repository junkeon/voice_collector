{"ast":null,"code":"var _jsxFileName = \"/home/jkpark/Documents/react/voice-collector/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport useStyles from './components/styled';\nimport NavBar from './components/NavBar';\nimport Record from './components/RecordDiv';\nimport DisplayList from './components/DisplayList';\nimport Login from './components/Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SimpleCard() {\n  _s();\n\n  const classes = useStyles();\n  const [sentList, setSentList] = useState([]);\n  const [listBtn, setListBtn] = useState(true);\n  const [mode, setMode] = useState('login');\n  const [index, setIndex] = useState(0);\n  const [userInfo, setUserInfo] = useState({\n    user: '',\n    passwd: ''\n  });\n  const {\n    user,\n    passwd\n  } = userInfo;\n  useEffect(() => {\n    if (mode === 'login') {\n      return /*#__PURE__*/_jsxDEV(Login, {\n        classes: classes,\n        user: user,\n        passwd: passwd,\n        userInfo: userInfo,\n        setUserInfo: setUserInfo,\n        setMode: setMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }, this);\n    } else if (mode === 'show') {\n      if (sentList.length === 0) {\n        getScript();\n        setListBtn(false);\n      }\n\n      return /*#__PURE__*/_jsxDEV(DisplayList, {\n        classes: classes,\n        sentList: sentList,\n        onClick: id => {\n          setIndex(id);\n          setMode('record');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this);\n    } else if (mode === 'record') {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        classes: classes,\n        sentList: sentList,\n        setSentList: setSentList,\n        index: index,\n        setIndex: setIndex,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this);\n    }\n  }, [mode]);\n\n  function getScript() {\n    const recipeUrl = \"http://0.0.0.0:5024/get_text\";\n    const postBody = {\n      'user': user\n    };\n    const requestMetadata = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postBody)\n    };\n    fetch(recipeUrl, requestMetadata).then(res => res.json()).then(res => {\n      const tmpList = [];\n      res['sent_list'].map(item => {\n        const sent = {\n          id: item[0],\n          text: item[1],\n          done: item[2]\n        };\n        tmpList.push(sent);\n      });\n      setSentList(tmpList);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.card,\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        classes: classes,\n        onClick: () => {\n          setMode('show');\n        },\n        listBtn: listBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        className: classes.cardContent,\n        children: showContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(SimpleCard, \"xrxh/6VBFVtmEnhF20djRhIEyOQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = SimpleCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleCard\");","map":{"version":3,"sources":["/home/jkpark/Documents/react/voice-collector/src/App.js"],"names":["React","useEffect","useState","Card","CardContent","useStyles","NavBar","Record","DisplayList","Login","SimpleCard","classes","sentList","setSentList","listBtn","setListBtn","mode","setMode","index","setIndex","userInfo","setUserInfo","user","passwd","length","getScript","id","recipeUrl","postBody","requestMetadata","method","headers","body","JSON","stringify","fetch","then","res","json","tmpList","map","item","sent","text","done","push","card","cardContent","showContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport useStyles from './components/styled'\nimport NavBar from './components/NavBar'\nimport Record from './components/RecordDiv'\nimport DisplayList from './components/DisplayList'\nimport Login from './components/Login'\n\n\n\nexport default function SimpleCard() {\n  const classes = useStyles();\n\n  const [sentList, setSentList] = useState([])\n  const [listBtn, setListBtn] = useState(true)\n  const [mode, setMode] = useState('login')\n  const [index, setIndex] = useState(0)\n\n  const [userInfo, setUserInfo] = useState({user:'', passwd:''})\n\n  const { user, passwd } = userInfo\n\n  useEffect(() => {\n    if (mode === 'login') {\n      return (<Login classes={classes}\n        user={user} passwd={passwd} userInfo={userInfo}\n        setUserInfo={setUserInfo}\n        setMode={setMode} />)\n    } else if (mode === 'show') {\n      if (sentList.length === 0) {\n        getScript()\n        setListBtn(false)\n      }\n\n      return (<DisplayList\n        classes={classes}\n        sentList={sentList}\n        onClick={(id) => {\n          setIndex(id)\n          setMode('record')\n        }} />)\n    } else if (mode === 'record') {\n      return (<Record\n        classes={classes}\n        sentList={sentList}\n        setSentList={setSentList}\n        index={index}\n        setIndex={setIndex}\n        user={user} />)\n    }\n  }, [mode])\n\n  function getScript() {\n    const recipeUrl = \"http://0.0.0.0:5024/get_text\"\n    const postBody = {\n      'user': user\n    }\n    const requestMetadata = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postBody)\n    };\n\n    fetch(recipeUrl, requestMetadata)\n      .then(res => res.json())\n      .then(res => {\n        const tmpList = []\n        res['sent_list'].map(item => {\n          const sent = { id: item[0], text: item[1], done: item[2] }\n          tmpList.push(sent)\n        })\n        setSentList(tmpList)\n      })\n  }\n\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <NavBar classes={classes} onClick={() => { setMode('show') }} listBtn={listBtn} />\n        <CardContent className={classes.cardContent}>\n          {showContent()}\n        </CardContent>\n      </Card>\n    </>\n\n  );\n}"]},"metadata":{},"sourceType":"module"}