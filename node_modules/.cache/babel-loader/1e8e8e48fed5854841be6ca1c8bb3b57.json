{"ast":null,"code":"var _jsxFileName = \"/home/jkpark/Documents/react/voice-collector/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, useRef, useEffect, useState } from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport useStyles from './components/styled';\nimport NavBar from './components/NavBar';\nimport Record from './components/RecordDiv';\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SimpleCard() {\n  _s();\n\n  const classes = useStyles();\n  const media = useReactMediaRecorder({\n    audio: true,\n    onStop: (a, b) => {\n      blobToBase64(b);\n    }\n  });\n  const [text, setText] = useState('');\n  const [recBtn, setRecBtn] = useState(true);\n\n  function blobToBase64(blob) {\n    console.log('Connect to server...');\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      var dataUrl = reader.result;\n      var base64 = dataUrl.split(',')[1];\n      sendToOffline(base64);\n    };\n\n    reader.readAsDataURL(blob);\n  }\n\n  ;\n\n  function sendToOffline(b64data) {\n    const recipeUrl = \"https://ai-demo.tmaxos.com/xwpqe/restasr/\";\n    const postBody = {\n      'uuid': 'restasr',\n      'data': b64data\n    };\n    const requestMetadata = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postBody)\n    };\n    fetch(recipeUrl, requestMetadata).then(res => res.json()).then(res => setText(res.text));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: classes.card,\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        classes: classes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        className: classes.cardContent,\n        children: /*#__PURE__*/_jsxDEV(Record, {\n          classes: classes,\n          recState: recBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: media.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        recBtn ? media.startRecording() : media.stopRecording();\n        setRecBtn(!recBtn);\n      },\n      children: recBtn ? \"Start Record\" : \"Stop Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SimpleCard, \"Gr+s3sr3dYP2ydYeicbVUE2tBhM=\", false, function () {\n  return [useStyles, useReactMediaRecorder];\n});\n\n_c = SimpleCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleCard\");","map":{"version":3,"sources":["/home/jkpark/Documents/react/voice-collector/src/App.js"],"names":["React","useRef","useEffect","useState","Card","CardContent","useStyles","NavBar","Record","useReactMediaRecorder","SimpleCard","classes","media","audio","onStop","a","b","blobToBase64","text","setText","recBtn","setRecBtn","blob","console","log","reader","FileReader","onload","dataUrl","result","base64","split","sendToOffline","readAsDataURL","b64data","recipeUrl","postBody","requestMetadata","method","headers","body","JSON","stringify","fetch","then","res","json","card","cardContent","status","startRecording","stopRecording"],"mappings":"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","sourcesContent":["import { React, useRef, useEffect, useState } from \"react\";\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport useStyles from './components/styled'\nimport NavBar from './components/NavBar'\nimport Record from './components/RecordDiv'\n\nimport { useReactMediaRecorder } from \"react-media-recorder\";\n\n\n\nexport default function SimpleCard() {\n  const classes = useStyles();\n\n  const media = useReactMediaRecorder({ audio: true, onStop: (a, b) => { blobToBase64(b);} })\n  const [text, setText] = useState('')\n  const [recBtn, setRecBtn] = useState(true)\n\n  function blobToBase64(blob) {\n    console.log('Connect to server...')\n    var reader = new FileReader();\n    reader.onload = function () {\n      var dataUrl = reader.result;\n      var base64 = dataUrl.split(',')[1];\n      sendToOffline(base64);\n    };\n    reader.readAsDataURL(blob);\n  };\n\n  function sendToOffline(b64data) {\n    const recipeUrl = \"https://ai-demo.tmaxos.com/xwpqe/restasr/\"\n    const postBody = {\n      'uuid': 'restasr',\n      'data': b64data\n    }\n    const requestMetadata = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postBody)\n    };\n\n    fetch(recipeUrl, requestMetadata).then(res => res.json()).then(res => setText(res.text))\n  }\n  \n  return (\n    <>\n    <Card className={classes.card}>\n      <NavBar classes={classes} />\n      <CardContent className={classes.cardContent}>\n        <Record classes={classes} recState={recBtn}/>\n      </CardContent>\n    </Card>\n\n    <p>{media.status}</p>\n      <button onClick={\n        () => {\n          recBtn ? media.startRecording() : media.stopRecording();\n          setRecBtn(!recBtn)\n        }\n      }>{recBtn ? \"Start Record\" : \"Stop Record\"}</button>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}